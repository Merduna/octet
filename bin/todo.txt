todo:
- create app user interface
- add welcome message
- add goodbye message
- create user input prompt to choose between number conversion mode and question challenge mode and exit
- create user input prompt input to choose between different challenge modes and exit
- create a loop for x questions that can interact with the numberQuestion
- create user input to prompt for the amount of questions they want to answer
- add a scoring system
- add 1 minute timer
- create user input to prompt if they want to use a timer
- make timer adjustable
- create user input to prompt if they want to use a timer
- create Repository layer
- store results locally
- add high score system
- store high scores locally


nicetohave:
- accept 1 digit hexadecimal numbers
- accept 2 digit hexadecimal numbers with only additional zero's at the front
- accept 8 digit binary numbers with only additional zero's at the front
- accept binary numbers with less than 8 digits
- 4, 8, 16, 24, 32 bit modes, novice, standard, advanced, expert, elite or nibble, octet, doublet, triplet, quadlet

completed:
26-10
- create folder structure according to controller, service, repository structure
- create a calculation service file
- create method to validate input string: valid binary number with a max value of 11111111
- create method to validate input string: valid decimal number with a max value of 255
- create method to validate input string: valid hexadecimal number with a max value of FF
- create method toconvert decimal number to 8 bit binary number
- create method toconvert 8 bit binary number to decimal number
- create method to convert decimal number to 2 digit hexadecimal number
- create method to convert 2 digit hexadecimal number to decimal number
- create a terminal controller to interact with the user
- convert user input numbers to decimal, hexadecimal and binary in the terminal
- create todo.txt file

27-10
- create method in controller to prompt the user with a single number conversion question, decimal to 8 bit binary
- add binary to decimal question option to the numberQuestion method
- add decimal to hexadecimal question to the numberQuestion method
- add hexadecimal to decimal question to the numberQuestion method
- add binary to hexadecimal question to the numberQuestion method
- add hexadecimal to binary question to the numberQuestion method
- add random question option to the numberQuestion method
- break the logic in numberQuestion down into smaller functions, setSolution, getQuestionString, promptQuestion, showSolution
- use switch statement instead of multiple 'else if'
- create model folder
- update todo.txt

28-10
- create model folder
- add Question class to model
- add Constants class to model for questionTypeOptions
- add QuestionService class
- move logic from Controller class to QuestionService class: setSolution, getQuestionString, random question generation
- rename CalcService to ConversionService
- redo folder structure: rename res to java, create parent folders /src/main
- compile classes into /bin
- create README file
- update todo.txt